// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2023 19:29:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    maq_estado
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maq_estado_vlg_sample_tst(
	clock,
	reset,
	x,
	sampler_tx
);
input  clock;
input  reset;
input  x;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module maq_estado_vlg_check_tst (
	d1,
	d2,
	d3,
	d4,
	sampler_rx
);
input  d1;
input  d2;
input  d3;
input  d4;
input sampler_rx;

reg  d1_expected;
reg  d2_expected;
reg  d3_expected;
reg  d4_expected;

reg  d1_prev;
reg  d2_prev;
reg  d3_prev;
reg  d4_prev;

reg  d1_expected_prev;
reg  d2_expected_prev;
reg  d3_expected_prev;
reg  d4_expected_prev;

reg  last_d1_exp;
reg  last_d2_exp;
reg  last_d3_exp;
reg  last_d4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	d1_prev = d1;
	d2_prev = d2;
	d3_prev = d3;
	d4_prev = d4;
end

// update expected /o prevs

always @(trigger)
begin
	d1_expected_prev = d1_expected;
	d2_expected_prev = d2_expected;
	d3_expected_prev = d3_expected;
	d4_expected_prev = d4_expected;
end



// expected d1
initial
begin
	d1_expected = 1'bX;
end 

// expected d2
initial
begin
	d2_expected = 1'bX;
end 

// expected d3
initial
begin
	d3_expected = 1'bX;
end 

// expected d4
initial
begin
	d4_expected = 1'bX;
end 
// generate trigger
always @(d1_expected or d1 or d2_expected or d2 or d3_expected or d3 or d4_expected or d4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected d1 = %b | expected d2 = %b | expected d3 = %b | expected d4 = %b | ",d1_expected_prev,d2_expected_prev,d3_expected_prev,d4_expected_prev);
	$display("| real d1 = %b | real d2 = %b | real d3 = %b | real d4 = %b | ",d1_prev,d2_prev,d3_prev,d4_prev);
`endif
	if (
		( d1_expected_prev !== 1'bx ) && ( d1_prev !== d1_expected_prev )
		&& ((d1_expected_prev !== last_d1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d1_exp = d1_expected_prev;
	end
	if (
		( d2_expected_prev !== 1'bx ) && ( d2_prev !== d2_expected_prev )
		&& ((d2_expected_prev !== last_d2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d2_exp = d2_expected_prev;
	end
	if (
		( d3_expected_prev !== 1'bx ) && ( d3_prev !== d3_expected_prev )
		&& ((d3_expected_prev !== last_d3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d3_exp = d3_expected_prev;
	end
	if (
		( d4_expected_prev !== 1'bx ) && ( d4_prev !== d4_expected_prev )
		&& ((d4_expected_prev !== last_d4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d4_exp = d4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module maq_estado_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
reg x;
// wires                                               
wire d1;
wire d2;
wire d3;
wire d4;

wire sampler;                             

// assign statements (if any)                          
maq_estado i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.reset(reset),
	.x(x)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500 1'b1;
	#500;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// x
initial
begin
	repeat(5)
	begin
		x = 1'b0;
		x = #900 1'b1;
		# 900;
	end
	x = 1'b0;
	x = #900 1'b1;
end 

maq_estado_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.x(x),
	.sampler_tx(sampler)
);

maq_estado_vlg_check_tst tb_out(
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.sampler_rx(sampler)
);
endmodule

